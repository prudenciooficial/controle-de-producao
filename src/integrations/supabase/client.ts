// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables');
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  }
});

// Global error handler for JWT expired
let jwtErrorHandler: ((error: any) => boolean) | null = null;

export const setJWTErrorHandler = (handler: (error: any) => boolean) => {
  jwtErrorHandler = handler;
};

// Interceptor para capturar erros de JWT
const originalFrom = supabase.from;
supabase.from = function<T = any>(relation: string) {
  const table = originalFrom.call(this, relation);
  
  // Interceptar m√©todos que fazem queries
  const interceptMethod = (methodName: string, originalMethod: any) => {
    return function(...args: any[]) {
      const result = originalMethod.apply(this, args);
      
      // Se o resultado tem um m√©todo then (√© uma Promise), interceptar
      if (result && typeof result.then === 'function') {
        return result.catch((error: any) => {
          // Verificar se √© erro de JWT expirado
          if (jwtErrorHandler && jwtErrorHandler(error)) {
            // Se foi tratado pelo handler, n√£o propagar o erro
            console.log('üîí Erro de JWT interceptado pelo handler global');
            return Promise.reject(error); // Ainda rejeita para que o c√≥digo chamador saiba que houve erro
          }
          // Se n√£o √© erro de JWT ou n√£o h√° handler, propagar normalmente
          return Promise.reject(error);
        });
      }
      
      return result;
    };
  };
  
  // Interceptar m√©todos principais
  if (table.select) table.select = interceptMethod('select', table.select.bind(table));
  if (table.insert) table.insert = interceptMethod('insert', table.insert.bind(table));
  if (table.update) table.update = interceptMethod('update', table.update.bind(table));
  if (table.delete) table.delete = interceptMethod('delete', table.delete.bind(table));
  if (table.upsert) table.upsert = interceptMethod('upsert', table.upsert.bind(table));
  
  return table as any;
};
